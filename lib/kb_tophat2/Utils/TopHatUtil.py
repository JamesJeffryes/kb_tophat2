import time
import json

from Workspace.WorkspaceClient import Workspace as Workspace


def log(message, prefix_newline=False):
    """Logging function, provides a hook to suppress or redirect log messages
    """
    print(('\n' if prefix_newline else '') + '{0:.2f}'.format(time.time()) + ': ' + str(message))     


class TopHatUtil:

    def _validate_run_tophat2_app_params(self, params):
        """
        _validate_run_tophat2_app_params:
                validates params passed to run_tophat2_app method
        """

        log('Start validating run_tophat2_app params')

        # check for required parameters
        for p in ['reads_ref', 'bowtie_index', 'workspace_name', 'alignment_object_name']:
            if p not in params:
                raise ValueError('"{}" parameter is required, but missing'.format(p))

    def __init__(self, config):
        self.ws_url = config["workspace-url"]
        self.callback_url = config['SDK_CALLBACK_URL']
        self.token = config['KB_AUTH_TOKEN']
        self.shock_url = config['shock-url']
        self.scratch = config['scratch']
        self.ws = Workspace(self.ws_url, token=self.token)

    def run_tophat2_app(self, params):
        """
        run_tophat2_app: run TopHat2 app
        (https://ccb.jhu.edu/software/tophat/manual.shtml)

        required params:
        reads_ref: input reads object (Single/Paired_reads, reads_set, sample_set)
        bowtie_index: indexed genome object ref built using Bowtie2
        workspace_name: the name of the workspace it gets saved to
        alignment_object_name: output Alignment or AlignmentSet object name

        optional params:
        num_threads: number of processing threads
        read_mismatches: read mismatch cutoff
        read_gap_length: read gap cutoff
        read_edit_dist: read edit cutoff
        min_intron_length: minimum intron length
        max_intron_length: maximum intron length
        min_anchor_length: minimum anchor length
        report_secondary_alignments: use this option to output secondary alignments
        no_coverage_search: use this option to disable the coverage-based search for junctions
        library_type: library type (fr-unstranded, fr-firststrand, fr-secondstrand)
        preset_options: alignment preset options (b2-very-fast, b2-fast, b2-sensitive, b2-very-sensitive)

        return:
        result_directory: folder path that holds all files generated by run_tophat2_app
        reads_alignment_object_ref: generated Alignment/AlignmentSet object reference
        report_name: report name generated by KBaseReport
        report_ref: report reference generated by KBaseReport
        """

        log('--->\nrunning TopHatUtil.run_tophat2_app\n' +
            'params:\n{}'.format(json.dumps(params, indent=1)))

        self._validate_run_tophat2_app_params(params)
