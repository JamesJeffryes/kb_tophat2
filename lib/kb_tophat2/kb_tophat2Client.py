# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_tophat2(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_tophat2_app(self, params, context=None):
        """
        run_tophat2_app: run TopHat2 app
        ref: https://ccb.jhu.edu/software/tophat/manual.shtml
        :param params: instance of type "TopHatInput" (required params:
           reads_ref: input reads object (Single/Paired_reads, reads_set,
           sample_set) bowtie_index: indexed genome object ref built using
           Bowtie2 workspace_name: the name of the workspace it gets saved to
           alignment_object_name: output Alignment or AlignmentSet object
           name optional params: num_threads: number of processing threads
           read_mismatches: read mismatch cutoff read_gap_length: read gap
           cutoff read_edit_dist: read edit cutoff min_intron_length: minimum
           intron length max_intron_length: maximum intron length
           min_anchor_length: minimum anchor length
           report_secondary_alignments: use this option to output secondary
           alignments no_coverage_search: use this option to disable the
           coverage-based search for junctions library_type: library type
           (fr-unstranded, fr-firststrand, fr-secondstrand) preset_options:
           alignment preset options (b2-very-fast, b2-fast, b2-sensitive,
           b2-very-sensitive) ref:
           https://ccb.jhu.edu/software/tophat/manual.shtml) -> structure:
           parameter "reads_ref" of type "obj_ref" (An X/Y/Z style
           reference), parameter "bowtie_index" of type "obj_ref" (An X/Y/Z
           style reference), parameter "workspace_name" of String, parameter
           "alignment_object_name" of String, parameter "num_threads" of
           Long, parameter "read_mismatches" of Long, parameter
           "read_gap_length" of Long, parameter "read_edit_dist" of Long,
           parameter "min_intron_length" of Long, parameter
           "max_intron_length" of Long, parameter "min_anchor_length" of
           Long, parameter "report_secondary_alignments" of type "boolean" (A
           boolean - 0 for false, 1 for true. @range (0, 1)), parameter
           "no_coverage_search" of type "boolean" (A boolean - 0 for false, 1
           for true. @range (0, 1)), parameter "library_type" of String,
           parameter "preset_options" of String
        :returns: instance of type "TopHatResult" (result_directory: folder
           path that holds all files generated by run_tophat2_app
           reads_alignment_object_ref: generated Alignment/AlignmentSet
           object reference report_name: report name generated by KBaseReport
           report_ref: report reference generated by KBaseReport) ->
           structure: parameter "result_directory" of String, parameter
           "reads_alignment_object_ref" of type "obj_ref" (An X/Y/Z style
           reference), parameter "report_name" of String, parameter
           "report_ref" of String
        """
        return self._client.call_method(
            'kb_tophat2.run_tophat2_app',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_tophat2.status',
                                        [], self._service_ver, context)
